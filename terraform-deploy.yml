# .github/workflows/terraform-deploy.yml

name: 'Terraform CI/CD'

on:
  push:
    branches:
      - main  # Ejecuta el workflow cuando se haga 'push' a la rama principal
  pull_request:
    branches:
      - main  # Ejecuta el workflow para Pull Requests (para el 'plan')
      
env:
  # ðŸ’¡ REEMPLAZAR con tu ARN de IAM
  AWS_IAM_ROLE: arn:aws:iam::620812304998:role/GitHubActions_Terraform_Deployer
  AWS_REGION: us-east-1

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: Desarrollo # Define un entorno para mejor control

    permissions:
      id-token: write # Permite que GitHub obtenga un token para OIDC
      contents: read

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    # 1. Configurar Credenciales de AWS (Usando el Rol de IAM)
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ env.AWS_IAM_ROLE }} # Usa el ARN definido arriba
        aws-region: ${{ env.AWS_REGION }}

    # 2. Configurar Terraform
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: 1.8.x

    # 3. Terraform Init (Inicializa y configura el backend S3)
    - name: Terraform Init
      id: init
      run: terraform init

    # 4. Terraform Validate (Verifica la sintaxis)
    - name: Terraform Validate
      id: validate
      run: terraform validate

    # 5. Terraform Plan (En Pull Requests)
    - name: Terraform Plan
      id: plan
      if: github.event_name == 'pull_request'
      run: terraform plan -no-color

    # 6. Terraform Apply (En Push a la rama main)
    # Solo aplica si el cambio es un 'push' directo a main
    - name: Terraform Apply
      if: github.event_name == 'push' && github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false

##fin ejecu
